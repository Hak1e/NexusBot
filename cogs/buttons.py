import asyncpg
import disnake
from disnake.ext import commands
import config
import json
from core.bot import Nexus
import typing as t

file_name = "settings.json"
class CloseButton(disnake.ui.View):
    def __init__(self):
        super().__init__(timeout=None)

    @disnake.ui.button(
        label="–ó–∞–∫—Ä—ã—Ç—å —Ç–∏–∫–µ—Ç",
        style=disnake.ButtonStyle.red,
        custom_id="delete_channel_button",
        emoji="‚ùå"
    )
    async def delete_channel_button(
            self,
            button: disnake.ui.Button,
            ctx: disnake.MessageInteraction
    ):
        channel = ctx.channel
        await channel.delete()


class ButtonView(disnake.ui.View):
    def __init__(self):
        super().__init__(timeout=None)

    # –ø—Ä–∞–≤–æ –Ω–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–∞–º–∏, —Ä–æ–ª—è–º–∏
    async def create_temp_channel(
            self,
            ctx: disnake.MessageInteraction,
            roles: list,
            ping_roles: str,
            channel_name: str
    ):
        guild = ctx.guild
        user = ctx.author
        category = guild.get_channel(config.text_channel_category_id)

        user_overwrite = disnake.PermissionOverwrite()
        user_overwrite.send_messages = True
        user_overwrite.view_channel = True

        overwrites = {
            guild.default_role: disnake.PermissionOverwrite(read_messages=False),
            ctx.message.author: user_overwrite,
            user: user_overwrite,
        }

        for role in roles:
            overwrites[role] = user_overwrite

        channel = await guild.create_text_channel(
            name=f"{user}-{channel_name}",
            category=category,
            overwrites=overwrites
        )

        embed = disnake.Embed(description=f"–ß—Ç–æ–±—ã –∑–∞–∫—Ä—ã—Ç—å —Ç–∏–∫–µ—Ç, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ")
        view = CloseButton()

        await channel.send(
            embed=embed,
            view=view
        )
        await channel.send(ping_roles)
        await ctx.response.defer()

    @disnake.ui.button(
        label="–í–æ–ø—Ä–æ—Å",
        style=disnake.ButtonStyle.grey,
        custom_id="question_button",
        emoji="‚ùî"
    )
    async def question_button(
            self,
            button: disnake.ui.Button,
            ctx: disnake.MessageInteraction
    ):
        support_roles = [ctx.guild.get_role(role_id) for role_id in config.add_role_to_question]
        moderation_roles = [ctx.guild.get_role(role_id) for role_id in config.add_role_to_report]
        roles_to_mention = support_roles + moderation_roles

        ping_roles = ""
        for role in roles_to_mention:
            ping_roles += f"<@&{role.id}>, "
        ping_roles += f"—É <@{ctx.author.id}> –∏–º–µ–µ—Ç—Å—è –≤–æ–ø—Ä–æ—Å"

        await self.create_temp_channel(
            ctx=ctx,
            roles=roles_to_mention,
            ping_roles=ping_roles,
            channel_name="–≤–æ–ø—Ä–æ—Å"
        )

    @disnake.ui.button(
        label="–ñ–∞–ª–æ–±–∞",
        style=disnake.ButtonStyle.red,
        custom_id="report_button",
        emoji="‚ùï"
    )
    async def report_button(
            self,
            button: disnake.ui.Button,
            ctx: disnake.MessageInteraction
    ):
        moderation_roles = [ctx.guild.get_role(role_id) for role_id in config.add_role_to_report]

        ping_roles = ""
        for role in moderation_roles:
            ping_roles += f"<@&{role.id}>, "
        ping_roles += f"–∂–∞–ª–æ–±–∞ –æ—Ç  <@{ctx.author.id}>"

        await self.create_temp_channel(
            ctx=ctx,
            roles=moderation_roles,
            ping_roles=ping_roles,
            channel_name="–∂–∞–ª–æ–±–∞"
        )

    @disnake.ui.button(
        label="–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ",
        style=disnake.ButtonStyle.blurple,
        custom_id="offer_button",
        emoji="üìù"
    )
    async def offer_button(
            self,
            button: disnake.ui.Button,
            ctx: disnake.MessageInteraction
    ):
        moderation_roles = [ctx.guild.get_role(role_id) for role_id in config.add_role_to_report]

        ping_roles = ""
        for role in moderation_roles:
            ping_roles += f"<@&{role.id}>, "
        ping_roles += f"<@{ctx.author.id}> —Ö–æ—á–µ—Ç —á—Ç–æ-—Ç–æ –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å!"

        await self.create_temp_channel(
            ctx=ctx,
            roles=moderation_roles,
            ping_roles=ping_roles,
            channel_name="–ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ"
        )


class EmbedButtons(commands.Cog):
    def __init__(
            self,
            bot: Nexus
    ):
        self.bot = bot
        self.persistent_views_added = False
        self.pool: t.Optional[asyncpg.Pool] = None
        self.message_id = self.load_settings()
        self.bot.settings = {}

    async def load_settings(self):
        async with self.pool.acquire() as conn:
            query = "SELECT message_with_buttons_id FROM guild_settings WHERE guild_id = $1"
            result = await conn.fetchval(query, self.bot.guild.id)
            print(f"–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã: {result}")
            return result

        # try:
        #     with open("file_name", "r") as f:
        #         self.bot.settings = json.load(f)
        #         self.message_id = self.bot.settings.get("message_id")
        #
        #     print(f"Message id: {self.message_id}")
        #
        # except FileNotFoundError:
        #     print("–§–∞–π–ª settings.json –Ω–µ –Ω–∞–π–¥–µ–Ω. –û–Ω –±—É–¥–µ—Ç —Å–æ–∑–¥–∞–Ω –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è")
        # except:
        #     print("–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞ settings.json")

    async def save_settings(
            self,
            guild_id: int,
            message_id: int
    ):
        async with self.pool.acquire() as conn:
            query = "INSERT INTO guild_settings (guild_id, message_with_buttons_id)" \
                    "VALUES ($1, $2)" \
                    "ON CONFLICT (guild_id) DO UPDATE SET message_with_buttons_id = $2"
            await conn.execute(query, guild_id, message_id)
            print(f"–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã")


    @commands.slash_command()
    async def support(
            self,
            ctx: disnake.CommandInteraction,
            image: disnake.Attachment = None
    ):
        """–°–æ–∑–¥–∞—Ç—å embed —Å –∫–Ω–æ–ø–∫–∞–º–∏
        Parameters
        ----------
        ctx: command interaction
        image: –¥–æ–±–∞–≤–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ (–æ—Ç–¥–µ–ª—å–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º). –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –¥–ª—è –±–æ–ª—å—à–µ–π –ø—Ä–∏–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        """
        view = ButtonView()
        embeds = []
        if image:
            embed1 = (
                disnake.Embed(
                    description="",
                    color=0x3f8fdf,
                )
                .set_image(image)
            )
            embeds.append(embed1)

        embed2 = (
            disnake.Embed(
                description="–í–æ—Å–ø–æ–ª—å–∑–æ–≤–∞–≤—à–∏—Å—å –∫–Ω–æ–ø–∫–∞–º–∏ –Ω–∏–∂–µ –º–æ–∂–Ω–æ –Ω–∞–ø–∏—Å–∞—Ç—å –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞–º –ø–æ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–º —Ç–µ–º–∞–º:",
                color=0x3f8fdf
            )
            .set_image(
                url="https://media.discordapp.net/attachments/1015290335779364958/1015295923829608468/unknown.png")
        )
        embeds.append(embed2)
        message = await ctx.channel.send(embeds=embeds, view=view)

        # data = {"message_id": message.id}
        # with open("file_name", "w") as f:
        #     json.dump(data, f)

        await self.save_settings(ctx.guild.id, message.id)


        await ctx.send("–°–æ–∑–¥–∞–Ω embed —Å –∫–Ω–æ–ø–∫–∞–º–∏")

    @commands.Cog.listener()
    async def on_connect(self):
        print("On_connect –≤ –∫–ª–∞—Å—Å–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏!")
        if self.persistent_views_added:
            return

        self.bot.add_view(ButtonView(), message_id=self.message_id)
        # self.bot.add_view(ButtonView(), message_id=1121460668558737442)


def setup(bot):
    bot.add_cog(EmbedButtons(bot))
