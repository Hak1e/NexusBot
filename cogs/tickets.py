import asyncpg
import disnake
from disnake.ext import commands
from core.bot import Nexus
from datetime import datetime, timedelta


class ButtonView(disnake.ui.View):
    def __init__(self):
        super().__init__(timeout=None)

    @disnake.ui.button(label="–í–æ–ø—Ä–æ—Å", style=disnake.ButtonStyle.grey,
                       custom_id="question_button", emoji="‚ùî")
    async def question_button(self, button: disnake.ui.Button, ctx: disnake.MessageInteraction):
        pass

    @disnake.ui.button(label="–ñ–∞–ª–æ–±–∞", style=disnake.ButtonStyle.red,
                       custom_id="report_button", emoji="‚ùï")
    async def report_button(self, button: disnake.ui.Button, ctx: disnake.MessageInteraction):
        pass

    @disnake.ui.button(label="–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ", style=disnake.ButtonStyle.blurple,
                       custom_id="offer_button", emoji="üìù")
    async def offer_button(self, button: disnake.ui.Button, ctx: disnake.MessageInteraction):
        pass


class Tickets(commands.Cog):
    def __init__(self, bot: Nexus):
        self.bot = bot
        self.pool: asyncpg.Pool = self.bot.get_pool()
        self.category_id = None
        self.roles_id_to_mention = []
        self.guild_button_cooldown = None
        self.guild_button_cooldown_end_time = None
        self.guild_category_ids = None
        self.guild_mention_roles_ids = None

    async def create_ticket_channel(self, ctx: disnake.MessageInteraction, roles: list,
                                    ping_roles: str, channel_name: str):
        guild = ctx.guild
        user = ctx.author
        category = ctx.guild.get_channel(self.guild_category_ids)
        user_overwrite = disnake.PermissionOverwrite(send_messages=True, view_channel=True)

        overwrites = {
            guild.default_role: disnake.PermissionOverwrite(read_messages=False),
            ctx.message.author: user_overwrite,
            user: user_overwrite,
        }

        for role in roles:
            overwrites[role] = user_overwrite

        channel = await guild.create_text_channel(name=f"{user}-{channel_name}", category=category,
                                                  overwrites=overwrites)
        embed = disnake.Embed(description=f"–ß—Ç–æ–±—ã –∑–∞–∫—Ä—ã—Ç—å —Ç–∏–∫–µ—Ç, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ")

        await channel.send(
            embed=embed,
            components=[
                disnake.ui.Button(label="–ó–∞–∫—Ä—ã—Ç—å —Ç–∏–∫–µ—Ç", style=disnake.ButtonStyle.red,
                                  custom_id="delete_channel_button", emoji="‚ùå")
            ]
        )
        allowed_mentions = disnake.AllowedMentions(users=True, roles=True)

        await channel.send(ping_roles, allowed_mentions=allowed_mentions)
        await ctx.response.defer()

    async def get_roles_and_text(self, ctx, message):
        roles_to_add = [ctx.guild.get_role(role_id) for role_id in self.guild_mention_roles_ids]
        roles_to_mention = ""
        for role in roles_to_add:
            roles_to_mention += f"{role.mention}, "
        roles_to_mention += message
        return roles_to_add, roles_to_mention

    async def question_channel(self, ctx):
        roles_to_add, roles_to_mention = \
            await self.get_roles_and_text(ctx, f"–≤–æ–ø—Ä–æ—Å –æ—Ç {ctx.author.mention}")
        await self.create_ticket_channel(ctx=ctx, roles=roles_to_add,
                                         ping_roles=roles_to_mention, channel_name="–≤–æ–ø—Ä–æ—Å")

    async def report_channel(self, ctx):
        roles_to_add, roles_to_mention = \
            await self.get_roles_and_text(ctx, f"–∂–∞–ª–æ–±–∞ –æ—Ç {ctx.author.mention}")
        await self.create_ticket_channel(ctx=ctx, roles=roles_to_add,
                                         ping_roles=roles_to_mention, channel_name="–∂–∞–ª–æ–±–∞")

    async def offer_channel(self, ctx):
        roles_to_add, roles_to_mention = \
            await self.get_roles_and_text(ctx, f"{ctx.author.mention} —Ö–æ—á–µ—Ç —á—Ç–æ-—Ç–æ –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å")

        await self.create_ticket_channel(ctx=ctx, roles=roles_to_add,
                                         ping_roles=roles_to_mention, channel_name="–ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ")

    async def activate_cooldown(self, ctx):
        self.guild_button_cooldown_end_time = datetime.now() + self.guild_button_cooldown
        self.guild_button_cooldown_end_time.isoformat()
        query = "INSERT INTO cooldown (guild_id, user_id, button_cooldown_end_time) " \
                "VALUES ($1, $2, $3) " \
                "ON CONFLICT (guild_id) DO " \
                "UPDATE SET user_id = $2, button_cooldown_end_time = $3"
        await self.pool.execute(query, ctx.guild.id, ctx.author.id, self.guild_button_cooldown_end_time)

    @commands.Cog.listener()
    async def on_button_click(self, ctx: disnake.MessageInteraction):
        button_id = ctx.component.custom_id
        guild_id = ctx.guild.id

        if button_id == "delete_channel_button":
            await ctx.channel.delete()
            return

        class_buttons_ids = ["question_button", "report_button", "offer_button"]
        if button_id not in class_buttons_ids:
            return

        try:
            query = "SELECT tickets_category_id " \
                    "FROM guild_settings " \
                    "WHERE guild_id = $1"
            self.guild_category_ids = await self.pool.fetchval(query, guild_id)

            query = "SELECT roles_id_to_mention " \
                    "FROM text_channels " \
                    "WHERE guild_id = $1"
            self.guild_mention_roles_ids = list(await self.pool.fetchval(query, guild_id))

            query = "SELECT button_cooldown " \
                    "FROM cooldown " \
                    "WHERE guild_id = $1"
            self.guild_button_cooldown = await self.pool.fetchval(query, guild_id)
            self.guild_button_cooldown = timedelta(minutes=self.guild_button_cooldown)

        except:
            await ctx.send(
                "–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è —Å–µ—Ä–≤–µ—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏", ephemeral=True
            )

        cooldown_active = False
        response = ""

        query = "SELECT button_cooldown_end_time " \
                "FROM cooldown " \
                "WHERE guild_id = $1 and user_id = $2"

        row = await self.pool.fetchrow(query, ctx.guild.id, ctx.author.id)
        if row:
            self.guild_button_cooldown_end_time = row["button_cooldown_end_time"]
            tz_time = datetime.now().astimezone(self.guild_button_cooldown_end_time.tzinfo)

            if self.guild_button_cooldown_end_time and \
                    self.guild_button_cooldown_end_time > tz_time:
                remaining_time = self.guild_button_cooldown_end_time - tz_time
                remaining_time = str(remaining_time).split(".")[0]
                response = f"–í—ã —Å–º–æ–∂–µ—Ç–µ –Ω–∞–∂–∞—Ç—å –Ω–∞ –∫–Ω–æ–ø–∫—É –µ—â—ë —Ä–∞–∑ —á–µ—Ä–µ–∑ {remaining_time} (—á–∞—Å—ã:–º–∏–Ω—É—Ç—ã:—Å–µ–∫—É–Ω–¥—ã)"
                cooldown_active = True

        if cooldown_active:
            await ctx.send(response, ephemeral=True)
        else:
            try:
                match button_id:
                    case "question_button":
                        await self.question_channel(ctx)
                    case "report_button":
                        await self.report_channel(ctx)
                    case "offer_button":
                        await self.offer_channel(ctx)

                await self.activate_cooldown(ctx)
            except:
                await ctx.send("–ù–µ –º–æ–≥—É —Å–æ–∑–¥–∞—Ç—å –∫–∞–Ω–∞–ª. –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ç–∏–∫–µ—Ç–æ–≤", ephemeral=True)

    @commands.slash_command()
    async def create(self, ctx):
        pass

    @create.sub_command()
    async def tickets_creator(self, ctx: disnake.CommandInteraction, image_url: str = None):
        """–°–æ–∑–¥–∞—Ç—å embed —Å –∫–Ω–æ–ø–∫–∞–º–∏
        Parameters
        ----------
        ctx: command interaction
        image_url: –î–æ–±–∞–≤–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        """
        view = ButtonView()
        embeds = []
        if image_url:
            embed1 = (
                disnake.Embed(
                    description="",
                    color=0x3f8fdf,
                )
                .set_image(url=image_url)
            )
            embeds.append(embed1)

        embed2 = (
            disnake.Embed(
                description="–í–æ—Å–ø–æ–ª—å–∑–æ–≤–∞–≤—à–∏—Å—å –∫–Ω–æ–ø–∫–∞–º–∏ –Ω–∏–∂–µ –º–æ–∂–Ω–æ –Ω–∞–ø–∏—Å–∞—Ç—å –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞–º –ø–æ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–º —Ç–µ–º–∞–º:",
                color=0x3f8fdf
            )
            .set_image(
                url="https://media.discordapp.net/attachments/1015290335779364958/1015295923829608468/unknown.png")
        )
        embeds.append(embed2)
        try:
            await ctx.channel.send(embeds=embeds, view=view)
            await ctx.send("–°–æ–∑–¥–∞–Ω embed —Å –∫–Ω–æ–ø–∫–∞–º–∏", ephemeral=True)
        except:
            await ctx.send("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ.\n"
                           "–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —è –º–æ–≥—É:"
                           "–ü—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å –∫–∞–Ω–∞–ª\n"
                           "–û—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è\n"
                           "–í—Å—Ç—Ä–∞–∏–≤–∞—Ç—å —Å—Å—ã–ª–∫–∏\n"
                           )

    async def is_ticket(self, ctx):
        query = "SELECT tickets_category_id " \
                "FROM guild_settings " \
                "WHERE guild_id = $1"
        category_id = await self.pool.fetchval(query, ctx.guild.id)

        if ctx.channel.category.id == category_id:
            return True
        else:
            return False

    async def member_overwrite(self, ctx, member, overwrite, message):
        if await self.is_ticket(ctx):
            await ctx.channel.set_permissions(member, overwrite=overwrite)
            await ctx.send(message)
        else:
            await ctx.send("–í—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç—É –∫–æ–º–∞–Ω–¥—É —Ç–æ–ª—å–∫–æ –≤ —Ç–∏–∫–µ—Ç–∞—Ö", ephemeral=True)

    @commands.slash_command()
    async def user(self, ctx):
        pass

    @user.sub_command()
    async def add(self, ctx: disnake.CommandInteraction, member: disnake.Member):
        """–î–æ–±–∞–≤–∏—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–∞ –≤ —ç—Ç–æ—Ç –∫–∞–Ω–∞–ª"""
        overwrite = disnake.PermissionOverwrite(view_channel=True)
        message = f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {member.mention} –¥–æ–±–∞–≤–ª–µ–Ω –≤ —ç—Ç–æ—Ç —á–∞—Ç"
        await self.member_overwrite(ctx, member, overwrite, message)

    @user.sub_command()
    async def remove(self, ctx: disnake.CommandInteraction, member: disnake.Member):
        """–£–¥–∞–ª–∏—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–∞ –∏–∑ —ç—Ç–æ–≥–æ –∫–∞–Ω–∞–ª–∞"""
        message = f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {member.mention} —É–¥–∞–ª—ë–Ω –∏–∑ —ç—Ç–æ–≥–æ —á–∞—Ç–∞"
        await self.member_overwrite(ctx, member, None, message)


def setup(bot):
    bot.add_cog(Tickets(bot))
